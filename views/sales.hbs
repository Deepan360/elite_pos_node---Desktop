<!DOCTYPE html>
<html lang="en">

<head>
    {{>header}}

    <style>
        #purchaseFormContainer {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #8f8f8f;
            padding: 20px;
            z-index: 1001;
            /* Ensure the popup is above the blurred background */
            border-radius: 10px;
        }

        .error {
            border: 1px solid red;

        }

        .new-row {
            display: none;
        }

        .input-field.product-name {
            width: 200px;
            /* Adjust the width as needed */
            padding: 5px;
            ;
        }

        .input-field.disc-mode {
            width: 200px;
            /* Adjust the width as needed */
            padding: 5px;
            ;
        }

        .editForm {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #8f8f8f;
            padding: 20px;
            z-index: 1001;
            /* Ensure the popup is above the blurred background */
            border-radius: 10px;
        }

        .container {
            margin-left: 20%;
        }

        .updateManufacturer {
            background-color: rgba(50, 141, 168) !important;
            color: white !important;
            border: none !important;
            border-radius: 3px !important;
            width: 80px !important;
            height: 30px;
        }

        .closeForm {
            background-color: rgba(50, 141, 168) !important;
            color: white !important;
            border: none !important;
            border-radius: 3px !important;
            width: 80px !important;
            height: 30px;
        }

        button {
            margin: 1px;
        }

        #message {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #ffffff;
            color: black;
            padding: 20px;
            z-index: 1000;
            size: 200px;
            font-weight: 700;
            justify-content: space-between;
            align-content: space-between;
            align-items: center;
            font-size: 14px;
            box-shadow: 0px 0px 12px rgba(0, 0, 0, 0.3) !important;
            border-radius: 8px;
            overflow: hidden;
        }

        .non-selectable {
            cursor: not-allowed;
            /* Show not-allowed cursor for non-selectable rows */
            opacity: 0.5;
            /* Make non-selectable rows appear faded */
        }

        form input {
            margin: 2px;
        }

        form button {
            width: 100px !important;
            padding: 5px;
            margin: 5px;
        }

        .col input {
            width: 100%;
        }

        input[type=checkbox] {
            width: 100px;
            color: #8f8f8f !important;
        }

        #submitButton {
            display: none;
        }
    </style>
    <style>
        .align-right-top {
            position: absolute;
            top: 0;
            right: 0;
            margin: 10px;
        }

        .btn.disabled,
        .btn[disabled] {
            background-color: #4e4e4e !important;
            border-color: #afafaf !important;
            cursor: not-allowed !important;
            opacity: 0.6;
            color: #000;
            pointer-events: none !important;
        }

        .input-invalid {
            border-color: red !important;
        }

        .btn.disabled,
        .btn[disabled] {
            background-color: #4e4e4e !important;
            border-color: #afafaf !important;
            cursor: not-allowed !important;
            opacity: 0.6;
            color: #000;
            pointer-events: none !important;
        }

        /* Ensure the Select2 dropdown has the correct width */
        .select2-container--default .select2-selection--single {
            height: 38px;
            /* Adjust this height to match your design */
            border: 1px solid #ced4da;
            /* Match your input styles */
            border-radius: 4px;
            /* Match your input styles */
        }

        /* Adjust the width of the dropdown */
        .select2-container {
            width: 100% !important;
            /* Make sure it takes full width */
        }

        /* Optional: Customize the dropdown's search input */
        .select2-container--default .select2-search--dropdown .select2-search__field {
            height: 38px;
            /* Match the height */
        }

        /* Optional: Style the placeholder */
        .select2-container--default .select2-selection--single .select2-selection__placeholder {
            color: #6c757d;
            /* Placeholder color */
        }

        tr td input.input-field {
            width: 100%;
            /* Make the input/select take full width of the td */
            max-width: max-content;
            /* Allow the input to stretch based on its content */
            box-sizing: border-box;
            white-space: nowrap;
            margin: 0;
            /* Remove any default margin */
            /* Center text in the inputs */
        }

        /* Table header (thead) styling to ensure alignment with tbody */
        table th {
            width: auto;
            /* Make the input/select take full width of the td */
            white-space: nowrap;
            box-sizing: border-box;
        }

        /* Responsive table container */
        .table-responsive {
            white-space: nowrap;
            /* Ensure the table does not break in smaller screens */
        }

        .w-200 {
            width: 100px !important;
        }

        .w2 {
            width: 70px !important;
        }
    </style>
</head>

<body class="g-sidenav-show bg-gray-100">
    {{>sidebar}}
    <main class="main-content position-relative border-radius-lg">
        {{>navbar}}
        <div class="table-responsive container-fluid py-4">
            <div class="form-control card">
                <div style="display: flex;justify-content: space-between;">
                    <h3>Sales </h3>
                    <div class="div" style="align-items: end;">
                        <button type="button" class="btn btn-success" id="new">New</button>
                        <button class="btn btn-info editmasbtn">Edit</button>
                        <button type="button" class="btn btn-danger deletemasBtn">Delete</button>
                    </div>
                </div>

                <form id="purchaseDetails" class="form-control" style="display: block; align-item: start;"
                    method="post">
                    <div class="row mt-2">

                        <div class="custom-input-container d-none col-md-3">
                            <select name="Id" class="dropdown" id="Id">
                                <option selected>view details</option>
                            </select>
                            <label for="purchaseId">Sale Id</label>
                            <input type="hidden" name="id" id="id">
                        </div>
                        <div class="custom-input-container col-md-3">
                            <select id="supplierSelect" class="dropdown" name="customername" required>
                                <option value="" disabled selected>Select Customer</option>
                            </select>
                            <label for="customername">Customer Name<span class="text-danger text-2x "
                                    style="font-size: medium !important;">*</span></label>
                        </div>
                        <div class="custom-input-container col-md-3">
                            <input type="text" placeholder=" " name="customermobileno" id="customermobileno">
                            <label for="customermobileno">Customer Mobile No</label>
                        </div>
                        <div class="custom-input-container col-md-3">
                            <input type="date" placeholder=" " name="saledate" id="saledate">
                            <label for="saledate">Sale Date<span class="text-danger text-2x "
                                    style="font-size: medium !important;">*</span></label>
                        </div>
                        <div class="col-md-3 custom-input-container ">
                            <label for="paymentmode">Payment Mode<span class="text-danger text-2x "
                                    style="font-size: medium !important;">*</span></label>
                            <select name="paymentmode" id="paymentmode" required>
                                <option value="" disabled selected hidden>Choose Payment Mode</option>
                                <option value="cash">Cash</option>
                                <option value="credit">Credit</option>
                                <option value="cash-credit">Cash/Credit</option>
                            </select>

                        </div>
                        <div class="custom-input-container ma col-md-3">
                            <select id="salesmannameSelect" class="dropdown" name="salesmanname">
                                <option value="" disabled selected>Select Salesman</option>
                            </select>
                            <label for="Salesman">Salesman </label>
                        </div>

                        <div class="custom-input-container col-md-3">
                            <input type="text" placeholder=" " name="referno" id="referno">
                            <label for="referno">Refer No</label>
                        </div>


                        <div class="custom-input-container col-md-3">
                            <input type="text" placeholder=" " name="transportno" id="transportno">
                            <label for="transportno">Transport No</label>
                        </div>

                    </div>
                    <div style="display: none;">
                        <input type="hidden" id="pamount_" name="pamount" value="0.00">
                        <input type="hidden" id="pigst_" name="pigst" value="0.00">
                        <input type="hidden" id="pcgst_" name="pcgst" value="0.00">
                        <input type="hidden" id="psgst_" name="psgst" value="0.00">
                        <input type="hidden" id="psubtotal_" name="psubtotal" value="0.00">
                        <input type="hidden" id="pcess_" name="pcess" value="0.00">
                        <input type="hidden" id="ptcs_" name="ptcs" value="0.00">
                        <input type="hidden" id="proundOff_" name="proundOff" value="0.00">
                        <input type="hidden" id="pnetAmount_" name="pnetAmount" value="0.00">
                        <input type="hidden" id="pdiscount_" name="pdiscount" value="0.00">
                        <input type="hidden" id="pdiscMode_" name="pdiscMode_" value="">
                    </div>
                </form>

                <div class="custom-input-container mt-1">
                    <a class="opener" id="openPurchaseForm"><i class="fa-solid fa-folder-plus fa-2x"></i></a>
                </div>
                <table id="customerTable" class="table-responsive justify-content-between align-items-end"
                    style="width:100% !important">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Product Name</th>
                            <th>Batch No</th>
                            <th>Expiry Date</th>
                            <th>Tax(%)</th>
                            <th>Quantity</th>
                            <th>Free</th>
                            <th class="d-none">UOM</th>
                            <th>Purc.Rate</th>
                            <th>MRP&nbsp;&nbsp;</th>
                            <th>Rate &nbsp;&nbsp;</th>
                            <th>Disc.Mode</th>
                            <th>Disc</th>
                            <th>Amount</th>
                            <th class="d-none">CGST</th>
                            <th class="d-none">SGST</th>
                            <th class="d-none">IGST</th>
                            <th >Total Amount</th>
                            <th class="action">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
                <div class="row">
                    <form action="/auth/purchase" method="post" id="purchaseDetails" style="display: contents;">
                        <div class="col-2 custom">
                            <div class="custom-input-container">
                                <select id="pdiscMode" class="dropdown" name="pdiscMode">
                                    <option selected="disabled">Select Discount Mode</option>
                                </select>
                                <label for="discMode">discMode<span class="text-danger text-2x "
                                        style="font-size: medium !important;">*</span></label>
                            </div>
                        </div>
                        <div class="col-2 custom">
                            <div class="custom-input-container">
                                <input type="text" placeholder=" " name="pdiscount" id="pdiscount" disabled>
                                <label for="pdiscount">discount<span class="text-danger text-2x "
                                        style="font-size: medium !important;">*</span></label>
                            </div>
                        </div>
                    </form>
                    <div class="col d-flex justify-content-end ms-auto">
                        <div class="div">
                            <button type="submit" class="btn updateBtn disabled disabled" id="not">Update</button>
                            <button type="button" class="btn draftBtn disabled" id="draftBtn">Draft</button>
                            <input type="hidden" name="is_Draft" id="is_Draft">
                        </div>
                        <button type="button" id="submitFormBtn" class="btn btn-primary custom-btn add">Submit</button>
                        <input type="button" id="draftButton" value="Draft" class="btn btn-primary custom-btn add">
                        <input type="hidden" name="is_Draft" id="is_Draft" value="0">

                    </div>


                </div>

                <form id="purchaseDetails" class="form-control p-0 bg-primary text-white" style="display: block; align-item: start;text-wrap:wrap;"
                    action="auth/sales" method="post">
                    <div class="row d-flex justify-content-between  mb-0 gx-0 w-100 ">


                        <div class="custom col-md-1">
                            <label for="pamount" class=" text-white">Amount:</label>
                            <span id="pamount" name="pamount">0.00</span>
                        </div>

                        <div class="custom col-md-1">
                            <label for="pigst" class=" text-white">IGST:</label>
                            <span id="pigst" name="pigts">0.00</span>
                        </div>



                        <div class="custom col-md-1">
                            <label for="pcgst" class=" text-white">CGST:</label>
                            <span id="pcgst" name="pcgst">0.00</span>
                        </div>

                        <div class="custom col-md-1">
                            <label for="psgst" class=" text-white">SGST:</label>
                            <span id="psgst" name="psgst">0.00</span>
                        </div>

                        <div class="custom col-md-1">
                            <label for="psubtotal" class=" text-white">Total Amount:</label>
                            <span id="psubtotal" name="psubtotal">0.00</span>
                        </div>


                    </div>
                    {{!--
                    <div class="custom">
                        <label for="pcess">CESS:</label>
                        <span id="pcess" name="pcess">0.00</span>
                    </div>


                    <div class="col">
                        <div class="custom">
                            <label for="ptcs">TCS:</label>
                            <span id="ptcs" name="ptcs">0.00</span>
                        </div>
                        <div class="custom">
                            <label for="proundOff">Round Off:</label>
                            <span id="proundOff" name="proundOff">0.00</span>
                        </div>
                    </div>
                    <div class="col">
                        <div class="custom">
                            <label for="pnetAmount">Net Amount:</label>
                            <span id="pnetAmount" name="pnetAmount">0.00</span>
                        </div>
                    </div> --}}
                    <div id="overlay"
                        style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 1000; overflow: auto;">
                        <div id="batchform"
                            style="display: none; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #ffffff; padding: 20px; border: 1px solid #ccc; width: 80%; max-width: 800px;">
                            <a class="closebatch" style="position: absolute; top: 0px; right: -2px;"><i
                                    class="fa-solid fa-circle-xmark fa-2x"></i></a>

                            <!-- Scrollable table container with fixed header -->
                            <div style="max-height: 200px; overflow-y: auto; position: relative;">
                                <table id="batchDetailsTable" class="table"
                                    style="width: 100%; table-layout: fixed; border-collapse: collapse;">
                                    <thead class="bg-primary"
                                        style="position: sticky; top: 0; z-index: 1; background-color: #007bff; color: white;">
                                        <tr>
                                            <th>Batch No</th>
                                            <th>Expiry Date</th>
                                            <th>Tax</th>
                                            <th>Quantity</th>
                                            <th>UOM</th>
                                            <th>Rate</th>
                                            <th>MRP</th>
                                            <th>Profit Margin</th>
                                        </tr>
                                    </thead>
                                    <tbody id="batchDetailsBody"></tbody>
                                </table>
                            </div>

                            <!-- Fixed Color Legend below the scrollable table -->
                            <div class="text-dark" style="margin-top: 10px;">
                                <strong>Color Legend:</strong>
                                <ul style="list-style: none; padding-left: 0;">
                                    <li><span
                                            style="background-color: red;  padding: 2px 5px;">&nbsp;&nbsp;&nbsp;</span>
                                        Already expired</li>
                                    <li><span
                                            style="background-color: orange;  padding: 2px 5px;">&nbsp;&nbsp;&nbsp;</span>
                                        Expiring in Three Months</li>
                                </ul>
                            </div>
                        </div>
                    </div>


                </form>

            </div>
            <div id="selectedRowDetails"></div>

        </div>
        <div id="alertMessage" class="alert alert-danger text-white d-none alert-dismissible show" role="alert"
            style="padding: 10px; border: 1px solid; margin-bottom: 10px; position: fixed; top: 0; right: 10px; width: 25%;">
            <button type="button" class="close text-white" data-bs-dismiss="alert" aria-label="Close"
                style="background: none; border: none; font-size: 20px; line-height: 1;">X</button>
        </div>
        <div class="alert alert-danger alert-dismissible fade show" role="alert" id="quantityAlert"
            style="display: none;">
            <strong>Warning!</strong> Quantity cannot be greater than the purchase quantity.
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>


        {{>footer}}
        </div>
        <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel"
            aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="confirmationModalLabel">Confirm Submission</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>There is a mismatch in the round-off amount. Do you want to proceed with submission?</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="confirmSubmitBtn">Submit</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="alertModal" class="modal fade" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Notification</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p id="modalMessage">Your message here</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
                    </div>
                </div>
            </div>
        </div>
            <div class="modal fade" id="stockAlertModal" tabindex="-1" aria-labelledby="stockAlertModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg"> <!-- Use modal-lg for a larger modal -->
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="stockAlertModalLabel">Stock Availability Alert</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <!-- Stock message and table will be inserted dynamically here -->
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>

    </main>
    {{>color}}

    <script>



        $.ajax({
            url: '/auth/sales/salesmanname',
            method: 'GET',
            success: function (response) {
                console.log('Received response fortype:', response);
                var options = response.data;
                if (options && options.length) {
                    options.forEach(function (option) {
                        $('.dropdown[name="salesmanname"]').append($('<option>', {
                            value: option.id,
                            text: option.ledgername
                        }));
                    });
                } else {
                    console.error('No options found for salesmanname)');
                }
            },
            error: function (xhr, status, error) {
                console.error('Error fetching options for salesmanname:', error);
            }
        });


        $(document).ready(function () {
            // Disable the discount input initially
            $('#pdiscount').prop('disabled', true);

            // Listen to change event on the discount mode dropdown
            $('#pdiscMode').change(function () {
                var selectedValue = $(this).val();

                if (selectedValue) {
                    // Enable discount input if a discount mode is selected
                    $('#pdiscount').prop('disabled', false);
                } else {
                    // Disable discount input if no discount mode is selected
                    $('#pdiscount').prop('disabled', true);
                }
            });
        });



        $(document).ready(function () {
            // Attach click event listener to the closebatch link
            $('.closebatch').on('click', function () {
                // Hide the overlay and batchform
                $('#overlay').hide();
                $('#batchform').hide();
            });
        });

        $(document).ready(function () {
            $.ajax({
                url: '/auth/purchase/discmode',
                method: 'GET',
                dataType: 'json',
                success: function (response) {
                    console.log('Received response for discmode options:', response);
                    var options = response.data;

                    if (options && options.length) {

                        var discModeDropdown = $('#pdiscMode');

                        discModeDropdown.find('option').remove();

                        discModeDropdown.append($('<option>', {
                            selected: 'selected',
                            disabled: 'disabled',
                            text: 'Select Disc Mode'
                        }));
                        options.forEach(function (option) {
                            discModeDropdown.append($('<option>', {
                                value: option.id,
                                text: option.discMode  // Display the discMode name
                            }));
                        });
                        console.log('Dropdown values:', discModeDropdown.val());
                    } else {
                        console.error('No options found for discmode');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching discmode options:', error);
                }
            });
        });

        $(document).on('click', '.editmasbtn', function () {
            showBootstrapModal('IF YOU GONNA EDIT IN QUANTITY OF SALES PRODUCT,DELETE THE TRANSACTION AND ADD  CORRECT QUANTITY 🖋');
            $('.opener').show();
            $('#customerTable tbody tr').each(function () {
                var row = $(this);
                var id = row.find('td:eq(0)').text();
               var product = row.find('td:eq(1)').text().trim();
                var batchNo = row.find('td:eq(2)').text();
                 var expiryDate = row.find('td:eq(3)').text();
                var tax = row.find('td:eq(4)').text();
                var quantity = row.find('td:eq(5)').text();
                var free = row.find('td:eq(6)').text();
                var uom = row.find('td:eq(7)').text();
                var purcRate = row.find('td:eq(8)').text();
                var mrp = row.find('td:eq(9)').text();
                var rate = row.find('td:eq(10)').text();
                var discMode = row.find('td:eq(11)').text();
                var discount = row.find('td:eq(12)').text();
                var amount = row.find('td:eq(13)').text();
                var cgst = row.find('td:eq(14)').text();
                var sgst = row.find('td:eq(15)').text();
                var igst = row.find('td:eq(16)').text();
                var totalAmount = row.find('td:eq(17)').text();

                row.html("<td><input type='number' readonly name='Id' class='input-field  purchase-id w2' value='" + id + "'></td>" +
                    "<td><select name='product' class='input-field product-name dropdown' id='productname_" + id + "'><option selected disabled>Select product</option></select></td>" +
                    "<td><input type='text' name='batchNo' class='input-field' value='" + batchNo + "' readonly></td>" +
                     "<td><input type='text' name='expiryDate' class='input-field' value='" + expiryDate + "' readonly></td>" +
                    "<td><input type='text' name='tax' class='input-field' value='" + tax + "' readonly></td>" +
                    "<td><input type='number' name='quantity' class='input-field' value='" + quantity + "'></td>" +
                    "<td><input type='number' name='free' class='input-field' value='" + free + "'></td>" +
                    "<td class='d-none' ><input type='text' name='uom' class='input-field' value='" + uom + "'></td>" +
                    "<td><input type='number' name='purcRate' class='input-field w2' value='" + purcRate + "' readonly></td>" +
                    "<td><input type='number' name='mrp' class='input-field w2' value='" + mrp + "' readonly></td>" +
                    "<td><input type='number' name='rate' class='input-field w-200' value='" + rate + "'></td>" +
                    "<td><select name='discMode' class='input-field disc-mode dropdown' id='discMode_" + id + "'><option selected disabled>Select Disc Mode</option></select></td>" +
                    "<td><input type='number' name='discount' class='input-field' value='" + discount + "'></td>" +
                    "<td><input type='number' name='amount' class='input-field' value='" + amount + "'readonly></td>" +
                    "<td class='d-none'><input type='number' name='cgst' class='input-field' value='" + cgst + "'readonly></td>" +
                    "<td class='d-none'><input type='number' name='sgst' class='input-field' value='" + sgst + "'readonly></td>" +
                    "<td class='d-none'><input type='number' name='igst' class='input-field' value='" + igst + "'readonly></td>" +
                    "<td><input type='number' name='totalAmount' class='input-field' value='" + totalAmount + "'readonly></td>" +
                    "<td><i class='fa-solid fa-trash deletetransBtn' type='button' data-id='" + id + "'></i></td>");

                fetchProductOptions(id, product);
                fetchDiscModeOptions(id, discMode);
            });

            calculateTotals();
            adjustColumnWidths();
        });
        function adjustColumnWidths() {
            $('#customerTable').DataTable().columns.adjust().draw();
        }

        $(document).on('click', '.deletetransBtn', function () {
            var row = $(this).closest('tr');
            var id = row.find('.purchase-id').val();
            if (!confirm('Are you sure you want to delete this row?')) {
                return;
            }
            $.ajax({
                type: 'DELETE',
                url: `/auth/salestransdelete/${id}`,
                success: function (response) {
                    if (response.success) {
                        table.row(row).remove().draw(false);
                        calculateTotals();
                        showBootstrapModal('Trans Row Deleted Successfully 🖋');
                    } else {
                        alert('Failed to delete row: ' + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error deleting row:', error);
                    alert('An error occurred while deleting the row.');
                }
            });
        });

        $(document).ready(function () {
            console.log('Document is ready');

            $('#paymentmode').change(function () {
                $('#ppaymentMode').val($(this).val());
            });

            $('#draftBtn').on('click', function () {
                // Set the value of is_Draft to 1
                $('#is_Draft').val('1');
                console.log('Draft button clicked, is_Draft value set to 1');
                // Trigger the click event of the update button
                $('.updateBtn').click();
            });

            // Sanitize payload
            function sanitizePayload(payload) {
                const sanitizedPayload = { ...payload };
                // Validate and remove unwanted fields
                delete sanitizedPayload.unwantedField;
                return sanitizedPayload;
            }

            // Utility function to format date
            function formateDate(dateString) {
                if (!dateString) return 'N/A';
                const date = new Date(dateString);
                const options = { year: 'numeric', month: 'short' }; // Example: Dec 2024
                return date.toLocaleDateString(undefined, options);
            }

            // Display stock alert in a modal
            function showStockAlert(insufficientStock) {
                const modalBody = $('#stockAlertModal .modal-body');
                modalBody.empty();

                const tableRows = insufficientStock.map(result => `
        <tr>
            <td>${result.productName}</td>
            <td>${result.batchNo || 'N/A'}</td>
            <td>${formateDate(result.expiryDate)}</td>
            <td>${result.message}</td>
        </tr>`).join('');

                const table = `
        <p>The following products have insufficient stock or other issues:</p>
        <table class="table table-striped table-hover table-sm">
            <thead class="bg-primary">
                <tr>
                    <th>Product Name</th>
                    <th>Batch No</th>
                    <th>Expiry Date</th>
                    <th>Message</th>
                </tr>
            </thead>
            <tbody>${tableRows}</tbody>
        </table>`;

                modalBody.html(table);
                $('#stockAlertModal').modal('show');
            }


            // Check stock availability for a product
            function checkStockAvailability(product) {
                return new Promise((resolve) => {
                    const requestUrl = `/auth/sales/checksalesStockAvailability/${encodeURIComponent(product.productId)}/${encodeURIComponent(product.batchNo)}/${encodeURIComponent(product.quantity)}/${encodeURIComponent(product.expiryDate)}`;
                    $.ajax({
                        type: 'GET',
                        url: requestUrl,
                        contentType: 'application/json',
                        success: function (response) {
                            const productName = (response.productName || product.productName || 'Unknown Product').slice(0, 30) + (response.productName.length > 30 ? '...' : '');
                            resolve({
                                status: response.success && response.availableStock >= product.quantity,
                                message: response.success ? '' : `Stock issue for ${productName}. Available: ${response.availableStock || 0}, Requested: ${product.quantity}`,
                                ...response,
                                productName,
                            });
                        },
                        error: function () {
                            resolve({
                                status: false,
                                message: `Failed to fetch stock info for ${product.productName || 'Unknown Product'}`,
                                productName: product.productName || 'Unknown Product',
                                batchNo: product.batchNo,
                                expiryDate: product.expiryDate,
                                availableStock: 0,
                            });
                        },
                    });
                });
            }


            // Handle update button click
            $(document).on('click', '.updateBtn', function (event) {
                event.preventDefault();

                const purchaseId = $('input[name="id"]').val();
                if (!purchaseId) {
                    alert('No purchase ID entered. Please enter a purchase ID to update.');
                    return;
                }

                showLoadingOverlay();

                // Check if the action is a draft
                const isDraft = $('#is_Draft').val() === '1';

                // Get updated product data
                const updatedProducts = getUpdatedProductsData();
                console.log('Updated Products:', updatedProducts); // Log to ensure correct data

                if (isDraft) {
                    // Skip stock availability checks and proceed directly to update request
                    console.log('Draft mode: skipping stock checks.');

                    // Gather all purchase details
                    const purchaseDetails = {
                        id: $('#id').val(),
                        saledate: $('#saledate').val(),
                        paymentmode: $('#ppaymentMode').val(),
                        customername: $('#customerSelect').val() || $('#customerId').val(),
                        doctorname: $('#doctorname').val(),
                        pamount: parseFloat($('#pamount_').val()) || 0,
                        pigst: parseFloat($('#pigst_').val()),
                        pcgst: parseFloat($('#pcgst_').val()),
                        psgst: parseFloat($('#psgst_').val()),
                        psubtotal: parseFloat($('#psubtotal_').val()),
                        pcess: parseFloat($('#pcess_').val()),
                        ptcs: parseFloat($('#ptcs_').val()),
                        proundOff: parseFloat($('#proundOff_').val()),
                        pnetAmount: parseFloat($('#pnetAmount_').val()),
                        pdiscMode_: parseFloat($('#pdiscMode_').val()) || 3,
                        pdiscount: parseFloat($('#pdiscount_').val()),
                        isDraft: $('#is_Draft').val() || 0
                    };

                    console.log('Purchase Details:', purchaseDetails); // Log purchase details

                    const payload = {
                        purchaseId: purchaseId,
                        purchaseDetails: purchaseDetails,
                        products: updatedProducts,
                    };

                    // Send update request
                    $.ajax({
                        type: 'PUT',
                        url: '/auth/salesEdit/' + purchaseId, // Ensure the correct endpoint
                        contentType: 'application/json',
                        data: JSON.stringify(payload),
                        success: function (response) {
                            hideLoadingOverlay();
                            console.log(response);
                            if (response.success) {
                                const successMessage = 'Sale Saved as Draft Successfully 🖋';
                                showBootstrapModal(successMessage, function () {
                                    window.location.href = '/salesretaildraft';
                                });
                            } else {
                                alert("Failed to update purchase: " + response.message);
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error updating purchase:', error);
                            console.error('Response:', xhr.responseText); // Log response for details
                            alert("Failed to update purchase. Check console for details.");
                        }
                    });
                    return; // Exit the function after processing the draft
                }

                // Perform stock availability checks
                const allStockChecks = updatedProducts.map(checkStockAvailability);

                Promise.allSettled(allStockChecks).then((results) => {
                    const insufficientStock = results
                        .filter((result) => result.status === 'fulfilled' && !result.value.status)
                        .map((result) => result.value);

                    const validProducts = results
                        .filter((result) => result.status === 'fulfilled' && result.value.status)
                        .map((result) => result.value);

                    // If insufficient stock, show alert and stop update
                    if (insufficientStock.length > 0) {
                        hideLoadingOverlay();
                        showStockAlert(insufficientStock); // Display stock alert
                    } else {
                        var purchaseDetails = {
                            id: $('#id').val(),
                            saledate: $('#saledate').val(),
                            paymentmode: $('#paymentmode').val(),
                            referno: $('#referno').val(),
                            transportno: $('#transportno').val(),
                            customername: $('#supplierSelect').val(),
                            salesmanname: $('#salesmannameSelect').val(), // Make sure this ID matches the customer name field ID in the HTML
                            customermobileno: $('#customermobileno').val(),
                            pamount: parseFloat($('#pamount_').val()),
                            pigst: parseFloat($('#pigst_').val()),
                            pcgst: parseFloat($('#pcgst_').val()),
                            psgst: parseFloat($('#psgst_').val()),
                            psubtotal: parseFloat($('#psubtotal_').val()),
                            pcess: parseFloat($('#pcess_').val()),
                            ptcs: parseFloat($('#ptcs_').val()),
                            proundOff: parseFloat($('#proundOff_').val()),
                            pnetAmount: parseFloat($('#pnetAmount_').val()),
                            pdiscMode_: parseFloat($('#pdiscMode_').val()), // Make sure this ID matches the discount mode field ID in the HTML
                            pdiscount: parseFloat($('#pdiscount_').val()),
                            isDraft: $('#is_Draft').val()// Make sure this ID matches the discount field ID in the HTML
                        };

                        console.log('Purchase Details:', purchaseDetails); // Log purchase details

                        const payload = {
                            purchaseId: purchaseId,
                            purchaseDetails: purchaseDetails,
                            products: updatedProducts,
                        };

                        // Send update request
                        $.ajax({
                            type: 'PUT',
                            url: '/auth/salesEdit/' + purchaseId, // Ensure the correct endpoint
                            contentType: 'application/json',
                            data: JSON.stringify(payload),
                            success: function (response) {
                                hideLoadingOverlay();
                                console.log(response);
                                if (response.success) {
                                    const successMessage = 'Sale Updated Successfully 🖋';
                                    showBootstrapModal(successMessage, function () {
                                        window.location.href = '/salesretailregister';
                                    });
                                } else {
                                    alert("Failed to update purchase: " + response.message);
                                }
                            },
                            error: function (xhr, status, error) {
                                console.error('Error updating purchase:', error);
                                console.error('Response:', xhr.responseText); // Log response for details
                                alert("Failed to update purchase. Check console for details.");
                            }
                        });
                    }
                });
            });
        });
    

    function showLoadingOverlay() {
        $('body').append('<div id="loadingOverlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 0.8); z-index: 9999; text-align: center;"><img src="/assets/img/6Gl.gif" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);"></div>');
    }

    // Function to hide loading overlay
    function hideLoadingOverlay() {
        $('#loadingOverlay').remove();
    }


        function getUpdatedProductsData() {
            var products = [];

            $('#customerTable tbody tr').each(function () {
                try {
                    var Id = $(this).find('.purchase-id').val();
                    var product = $(this).find('.product-name').val();
                    var batchNo = $(this).find('[name="batchNo"]').val();
                    var expiryDate = $(this).find('[name="expiryDate"]').val();
                    var tax = $(this).find('[name="tax"]').val();
                    var quantity = $(this).find('[name="quantity"]').val();
                    var free = $(this).find('[name="free"]').val() || 0;
                    var uom = $(this).find('[name="uom"]').val();
                    var purcRate = $(this).find('[name="purcRate"]').val();
                    var mrp = $(this).find('[name="mrp"]').val();
                    var rate = $(this).find('[name="rate"]').val();
                    var discMode = $(this).find('[name="discMode"]').val() || 3;
                    var discount = $(this).find('[name="discount"]').val() || 0;
                    var amount = $(this).find('[name="amount"]').val();
                    var cgst = $(this).find('[name="cgst"]').val();
                    var sgst = $(this).find('[name="sgst"]').val();
                    var igst = $(this).find('[name="igst"]').val();
                    var totalAmount = $(this).find('[name="totalAmount"]').val();

                    var product = {
                        Id: Id,
                        productId: product,
                        batchNo: batchNo,
                        expiryDate:expiryDate,
                        tax: tax,
                        quantity: quantity,
                        free: free,
                        uom: uom,
                        purcRate: purcRate,
                        mrp: mrp,
                        rate: rate,
                        discMode: discMode,
                        discount: discount,
                        amount: amount,
                        cgst: cgst,
                        sgst: sgst,
                        igst: igst,
                        totalAmount: totalAmount
                    };

                    products.push(product);
                } catch (error) {
                    console.error('Error processing row:', this);
                    console.error('Error details:', error);
                }
            });

            return products;
        }
      
      
            async function fetchProductOptions(id, selectedProduct) {
                try {
                    const response = await fetch('/auth/sales/salesproductname');
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    const data = await response.json();
                    console.log('Product Options:', data); // Log the fetched data for debugging

                    // Ensure data is an array and populate the dropdown
                    if (Array.isArray(data.data)) {
                        console.log('Populating dropdown for ID:', id); // Debugging
                        populateDropdown('#productname_' + id, data.data, selectedProduct);
                    } else {
                        console.error('Fetched data is not an array:', data.data);
                    }
                } catch (error) {
                    console.error('Error fetching product options:', error);
                }
            }
{{!--             
        function fetchProductOptions(id, product) {
            $.ajax({
                  url: '/auth/sales/salesproductname',
                method: 'GET',
                success: function (response) {
                    console.log('Product Options:', response); // Check response in console
                    // Populate the product dropdown with response.data and select the matching product name
                    populateDropdown('#productname_' + id, response.data, product);
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching product options:', error);
                }
            });
        } --}}

        function fetchDiscModeOptions(id, discModeData) {
            $.ajax({
                url: '/auth/purchase/discmode',
                method: 'GET',
                success: function (response) {
                    console.log('Disc Mode Options:', response); // Check response in console
                    populateDropdown('#discMode_' + id, response.data, discModeData);
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching discMode options:', error);
                }
            });
        }

        function populateDropdown(selector, options, selectedOption) {
            var dropdown = $(selector);
            dropdown.empty();
            // Add default option
            dropdown.append($('<option>').text('Select').attr('value', ''));
            options.forEach(function (option) {
                if (typeof option === 'object') {
                    var productName = option.productname ? option.productname.trim() : '';
                    var discMode = option.discMode ? option.discMode.trim() : '';
                    var optionText = (productName && discMode) ? productName + ' (' + discMode + ')' : productName || discMode || '';
                    var optionValue = option.id;
                    var isSelected = optionText === selectedOption; // Check if the option matches the selected option
                    dropdown.append($('<option>').text(optionText).attr('value', optionValue).prop('selected', isSelected));
                } else {
                    dropdown.append($('<option>').text(option).attr('value', option));
                }
            });
        }

        $(document).ready(function () {
            $(document).on('click', '.deletemasBtn', function () {
                var id = getSelectedPurchaseId();
                var deleteUrl = '/auth/salesdelete/' + id;
                $.ajax({
                    type: 'DELETE',
                    url: deleteUrl,
                    success: function (response) {
                        console.log(response);
                        if (response.success) {
                            showBootstrapModal('Purchase Deleted Successfully 🖋', function () {
                                window.location.href = '/salesregister';
                            });
                        } else {
                            alert("Failed to delete purchase: " + response.error);
                        }
                    },
                    error: function (error) {
                        console.error('Error deleting purchase:', error);
                        alert("Failed to delete purchase. Check console for details.");
                    }
                });
            });
            function getSelectedPurchaseId() {
                var selectedOption = $('.dropdown[name="Id"] option:selected');
                if (!selectedOption || !selectedOption.val()) {
                    console.error('No purchase option selected');
                    return null;
                }
                try {
                    var rowDetails = JSON.parse(selectedOption.val());
                    return rowDetails.id;
                } catch (error) {
                    console.error('Error parsing JSON:', error);
                    return null;
                }
            }
        });

    $(document).ready(function () {
        $('.div').hide();
        $('.add').show();
        $('.updateBtn, .draftBtn').addClass('disabled').prop('disabled', true);

        // Initial hiding of the opener
        $('#openPurchaseForm').hide();

        $('.dropdown[name="Id"]').change(function () {
            var selectedOption = $(this).find('option:selected');
            if (selectedOption.val() && selectedOption.val() !== 'view details') {
                $('.div').show();
                $('.opener').hide();
                $('.add').hide();
            } else {
                $('.div').hide();
                $('.add').show();
                $('#openPurchaseForm').hide(); // Hide the opener if no valid option is selected
            }

            // Check if all required fields are filled after dropdown change
            checkRequiredFields();
        });

        function checkRequiredFields() {
            let isValid = true;

            // Iterate over all required fields and check their validity
            $('#purchaseDetails').find('input[required], select[required]').each(function () {
                if ($(this).val() === '' || $(this).val() === null) {
                    isValid = false;
                }
            });

            // Show the opener only if all fields are valid and the dropdown has a selected value
            if (isValid && $('.dropdown[name="Id"]').find('option:selected').val()) {
                $('#openPurchaseForm').show();
            } else {
                $('#openPurchaseForm').hide();
            }
        }

        // Bind input and change events to validate on the fly
        $('#purchaseDetails').find('input, select').on('input change', function () {
            checkRequiredFields();
        });

        // When the edit button is clicked
        $('.editmasbtn').click(function () {
            $('.div').find('button').prop('disabled', false);
            $('.updateBtn').removeClass('disabled').prop('disabled', false).addClass('btn-info');
            $('.draftBtn').removeClass('disabled').prop('disabled', false).addClass('btn-info');

            // Check required fields again to possibly show the opener
            checkRequiredFields();
        });
    });
    // Add an event listener for the rate input field to ensure it stays within pmrate and mrp
 document.addEventListener('input', function (event) {
        if (event.target.matches('.input-field') && event.target.name === 'rate') {
            let rateInput = event.target;
            let uniqueId = rateInput.id.split('_')[1];  // Assuming ID format is rate_{uniqueId}

            // Retrieve pmrate and mrp for the given uniqueId
            let pmrate = parseFloat(rateInput.getAttribute('data-pmrate'));  // pmrate should be set as data attribute
            let mrp = parseFloat(rateInput.getAttribute('data-mrp'));  // mrp should be set as data attribute
            let rateValue = parseFloat(rateInput.value);

            // Check if rate value falls below pmrate or above mrp
            if (rateValue < pmrate) {
                rateInput.classList.add('error'); // Visual feedback for invalid rate
                rateInput.setCustomValidity(`Rate cannot be less than the minimum purchase rate of ${pmrate}.`);
            } else if (rateValue > mrp) {
                rateInput.classList.add('error'); // Visual feedback for invalid rate
                rateInput.setCustomValidity(`Rate cannot exceed the maximum retail price of ${mrp}.`);
            } else {
                rateInput.classList.remove('error'); // Remove error class if rate is valid
                rateInput.setCustomValidity(''); // Clear custom validity message
            }
        }
    });

    // Handle onBlur event to finalize the rate value
    document.addEventListener('blur', function (event) {
        if (event.target.matches('.input-field') && event.target.name === 'rate') {
            let rateInput = event.target;
            let uniqueId = rateInput.id.split('_')[1]; // Get the uniqueId

            let pmrate = parseFloat(rateInput.getAttribute('data-pmrate'));  // Get pmrate
            let mrp = parseFloat(rateInput.getAttribute('data-mrp'));  // Get mrp
            let rateValue = parseFloat(rateInput.value);

            // Correct the value if it's out of bounds
            if (rateValue < pmrate) {
                rateInput.value = pmrate; // Set to pmrate if less than minimum
            } else if (rateValue > mrp) {
                rateInput.value = mrp; // Set to mrp if greater than maximum
            }
        }
    }, true);


    // Prevent mouse wheel from changing the rate input value
    document.addEventListener('wheel', function (event) {
        if (event.target.matches('.input-field') && event.target.name === 'rate') {
            event.preventDefault();  // Prevent mouse wheel input changes
        }
    }, { passive: false });

    // Function to apply and validate rate and discount fields
    function updateRateAndDiscount(uniqueId, pmrate, mrp, discount) {
        let rateInput = document.getElementById('rate_' + uniqueId);
        let discountInput = document.getElementById('discount_' + uniqueId);  // Assuming discount has unique ID

        if (rateInput) {
            // Adjust rate based on discount if needed
            let adjustedRate = parseFloat(rateInput.value) * (1 - (discount / 100));

            // Ensure adjusted rate falls within pmrate and mrp
            if (adjustedRate < pmrate || adjustedRate > mrp) {
                alert(`Adjusted rate must remain within ${pmrate} and ${mrp}.`);
                rateInput.value = Math.min(Math.max(adjustedRate, pmrate), mrp);
            } else {
                rateInput.value = adjustedRate.toFixed(2);  // Update rate with adjusted value
            }
        }
    }


        // Add an event listener to validate the quantity field on input
        document.addEventListener('input', function (event) {
            if (event.target.matches('.quantity')) {
                let quantityInput = event.target;
                let freeInput = document.querySelector(`#free_${quantityInput.id.split('_')[1]}`); // Get corresponding free input field

                // Parse the value as an integer
                let quantityValue = parseInt(quantityInput.value, 10);
                let maxQuantity = parseInt(quantityInput.getAttribute('max'), 10);

                // If the value is NaN (not a number) or less than 1, set the value to an empty string
                if (isNaN(quantityValue) || quantityValue < 0) {
                    quantityInput.value = '';
                } else if (quantityValue > maxQuantity) {
                    quantityInput.value = maxQuantity;
                }

                // Validate the free input field
                if (freeInput) {
                    let freeValue = parseInt(freeInput.value, 10) || 0;
                    if (quantityValue + freeValue > maxQuantity) {
                        alert('The sum of quantity and free value cannot exceed the maximum quantity.');
                        freeInput.value = ''; // Clear the free field
                    }
                }
            }
        });

        // Add an event listener to validate the free field on input
        document.addEventListener('input', function (event) {
            if (event.target.matches('.input-field') && event.target.name === 'free') {
                let freeInput = event.target;
                let quantityInput = document.querySelector(`#quantity_${freeInput.id.split('_')[1]}`); // Get corresponding quantity input field

                // Parse the values as integers
                let freeValue = parseInt(freeInput.value, 10) || 0;
                let quantityValue = parseInt(quantityInput.value, 10);
                let maxQuantity = parseInt(quantityInput.getAttribute('max'), 10);

                // Validate the sum of quantity and free values
                if (quantityValue + freeValue > maxQuantity) {
                    alert('The sum of quantity and free value cannot exceed the maximum quantity.');
                    freeInput.value = ''; // Clear the free field
                }
            }
        });

        // Prevent mouse wheel from changing the value of the input field
        document.addEventListener('wheel', function (event) {
            if (event.target.matches('.quantity, .input-field')) {
                event.preventDefault(); // Prevent scrolling from affecting the input field value
            }
        }, { passive: false });

        // Function to set quantity and max attributes
        function updateQuantityInput(uniqueId, quantity) {
            let quantityInput = document.getElementById('quantity_' + uniqueId);
            if (quantityInput) {
                quantityInput.value = Math.max(1, quantity); // Ensure the value is at least 1
                quantityInput.setAttribute('max', quantity);

                // Also update the max attribute of the corresponding free input field
                let freeInput = document.getElementById('free_' + uniqueId);
                if (freeInput) {
                    freeInput.setAttribute('max', quantity);
                }
            }
        }

        function showBootstrapModal(message, callback) {
            // Set the message in the modal
            $('#modalMessage').text(message);

            // Show the modal
            var myModal = new bootstrap.Modal(document.getElementById('alertModal'));
            myModal.show();

            // When the modal is hidden, execute the callback if provided
            $('#alertModal').on('hide.bs.modal', function () {
                if (typeof callback === 'function') {
                    callback();
                }
            });
        }
        $(document).ready(function () {
            let table = $('#customerTable').DataTable();
            let products = [];
            let uniqueId = generateUniqueId();
            calculateTotals();
            $('#openPurchaseForm').on('click', function () {

                $('#customerTable').parent().scrollLeft(0);
                let selectedSupplier = $('#supplierSelect').val();
                if (selectedSupplier && selectedSupplier !== '' && selectedSupplier !== 'Select Customer') {
                    let purchaseId = generateUniqueId();
                    $('#purchaseId').val(purchaseId);
                    let uniqueId = generateUniqueId();

                    let newRow = $("<tr data-uniqueId='" + uniqueId + "'>" +
                        "<td><input type='hidden' name='purchaseId' class='input-field purchase-id' value='" + purchaseId + "'></td>" +
                        "<td><select name='productname' class='input-field product-name dropdown' id='productname_" + uniqueId + "' placeholder='Product Name' required><option selected disabled>Select product</option></select></td>" +
                        "<td><input type='text' name='batchNo' class='input-field' id='batchNo_" + uniqueId + "' placeholder='Batch No' readonly></td>" +
                                           "<td><input type='text' name='expiryDate' class='input-field' id='expiryDate_" + uniqueId + "' placeholder='Expiry Date' readonly></td>" +

                        "<td><input type='text' name='tax' class='input-field' id='tax_" + uniqueId + "' placeholder='Tax(%)' readonly></td>" +
                        "<td><input type='number' name='quantity' min='1' class='input-field quantity' id='quantity_" + uniqueId + "' placeholder='Quantity' oninput='this.value = this.value.replace(/[^0-9]/g, \"\")' required></td>" +
                        "<td><input type='number' name='free'min='0' class='input-field' id='free_" + uniqueId + "' placeholder='Free' oninput='this.value = this.value.replace(/[^0-9]/g, \"\")'></td>" +
                        "<td class='d-none'><input type='text' name='uom' class='input-field' id='uom_" + uniqueId + "' placeholder='UOM'></td>" +
                        "<td><input type='number' name='purcRate' class='input-field' id='purcRate_" + uniqueId + "' placeholder='purcRate' readonly></td>" +
                        "<td><input type='number' name='mrp' class='input-field w2' id='mrp_" + uniqueId + "' placeholder='mrp' readonly></td>" +
                        "<td><input type='number' name='rate' class='input-field w-200' id='rate_" + uniqueId + "' placeholder='Rate' required></td>" +
                        "<td><select name='discMode' class='input-field product-name dropdown  ' id='discMode_" + uniqueId + "' placeholder='Disc.Mode'><option selected disabled>Select Disc Mode</option></select></td>" +
                        "<td><input type='number' name='discount' class='input-field' id='discount_" + uniqueId + "' placeholder='Discount' disabled></td>" +
                        "<td><input type='number' name='amount' class='input-field' id='amount_" + uniqueId + "' placeholder='Amount' readonly></td>" +
                        "<td class='d-none'><input type='number' name='cgst' class='input-field' id='cgst_" + uniqueId + "' placeholder='CGST' readonly></td>" +
                        "<td class='d-none'><input type='number' name='sgst' class='input-field' id='sgst_" + uniqueId + "' placeholder='SGST' readonly></td>" +
                        "<td class='d-none'><input type='number' name='igst' class='input-field' id='igst_" + uniqueId + "' placeholder='IGST' readonly></td>" +
                        "<td><input type='number' name='totalAmount' class='input-field' id='totalAmount_" + uniqueId + "' placeholder='Total Amount' readonly></td>" +
                        "<td class='action new-row'><i class='fa-solid fa-trash deleteRowBtn text-danger' type='button'></i> <i class='fa-solid fa-plus addRowBtn text-success' type='button'></i></td>" +
                        "</tr>");
                    $('#customerTable tbody').append(newRow);
                    table.rows.add([newRow[0]]).draw();
                       // Scroll to the newly added row
                    let rowElement = newRow[0];
                    rowElement.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });

                    // Optionally, focus on the first input in the new row (if needed)
                    $(newRow).find('input:first').focus();
                    $.ajax({
                        url: '/auth/sales/salesproductname',
                        method: 'GET',
                        success: function (response) {
                            console.log('Received response for product:', response);
                            var options = response.data;

                            if (options && options.length) {
                                options.forEach(function (option) {
                                    console.log('Option:', option);
                                    $('#productname_' + uniqueId).append($('<option>', {
                                        value: option.id,
                                        text: option.productname
                                    }));
                                });

                                $('#productname_' + uniqueId).on('change', function () {
                                    var selectedProductId = $(this).val();

                                    var selectedProduct = options.find(function (product) {
                                        return product.id == selectedProductId;

                                    });

                                    if (selectedProduct) {
                                        // Log the selected product details to the console
                                        console.log('Selected Product:', selectedProductId);

                                        fetchBatchDetails(selectedProductId, uniqueId); // Pass uniqueId here
                                    }
                                });


                                fetchDiscmodeOptions(uniqueId);
                                disableOpener();
                            } else {
                                console.error('No options found for product name');
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error fetching options for product name:', error);
                        }
                    });


                } else {
                    alert("Please select a Customer before adding a row.");
                }
            });


            function disableOpener() {
                $('#openPurchaseForm').prop('disabled', true);
            }

            $('#customerTable tbody').on('click', 'i.deleteRowBtn', function () {
                let row = $(this).closest("tr");
                if (row) {
                    table.row(row).remove().draw(false);
                    calculateTotals();
                }
            });

            $('#customerTable tbody').on('click', 'i.addRowBtn', function () {
                // Get the uniqueId of the current row to validate it
                let row = $(this).closest("tr");
                let uniqueId = row.attr('data-uniqueid'); // Get the unique ID from the row

                // Trigger validation before allowing a new row to be added
                let isValid = validateAmount(uniqueId);

                if (isValid) {
                    // If validation passes, trigger adding a new row
                    $('#openPurchaseForm').click();
                } else {
                    // If validation fails, do not add a new row and show alert
                    alert('Please correct the errors before adding a new row.');
                }
            });

            $('#productname_' + uniqueId).on('change', function () {
                var selectedProductId = $(this).val();
                var selectedBatchNo = $('#batchNo_' + uniqueId).val(); // Ensure batchNo is populated

                if (isProductBatchAlreadySelected(selectedProductId, selectedBatchNo)) {
                    alert('This product and batch is already selected.');
                } else {
                    fetchBatchDetails(selectedProductId, uniqueId);
                }
            });
 
            $(document).ready(function () {
                // Event listener for Draft Button
                $('#draftButton').on('click', function () {
                    $('#is_Draft').val('1'); // Set is_Draft to 1 for draft
                    submitForm(); // Submit directly without validation
                });
                function showAlert(message) {
                    $('#alertMessage').text(message);
                    $('#alertBox').show();
                }
                // Event listener for Submit Button
                $('#submitFormBtn').on('click', function () {
                    if (!validateRows()) {
                        let alertMessage = 'Please correct the errors before submitting.';
                        alert("Please correct the errors before submitting");
                        showAlert(alertMessage);
                        return; // Stop form submission if validation fails
                    }
                    let roundOff = parseFloat($('#proundOff').text()) || 0;
                    if (roundOff === 0) {
                        submitForm(); // Submit directly if no round-off value
                    } else {
                        $('#confirmationModal').modal('show'); // Show modal if round-off is not zero
                    }
                });

                // Confirm submit in the modal
                $('#confirmSubmitBtn').on('click', function () {
                    $('#is_Draft').val('1'); // Ensure it's set to submit
                    submitForm(); // Submit form
                    $('#confirmationModal').modal('hide'); // Hide the modal
                });

                // Form submit logic
                function submitForm() {

                    let formData = $('#purchaseDetails').serializeArray();
                    let products = getProductsData();
                    showLoadingOverlay();
                    formData.push({ name: 'products', value: JSON.stringify(products) });
                    formData.push({ name: 'isDraft', value: $('#is_Draft').val() });

                    $.ajax({
                        url: '/auth/sales',
                        method: 'POST',
                        data: formData,
                       success: function (response) {
                            console.log(response);
                            if (response.success) {
                                // Check if the response contains a draft value
                                if ($('#is_Draft').val() === '1') {
                                    showBootstrapModal('Sale Saved as Draft Successfully 🖋', function () {
                                        window.location.href = '/salesdraftregister'; // Redirect to draft page
                                    });
                                } else {
                                    showBootstrapModal('Sales Added Successfully 🖋', function () {
                                        window.location.href = '/salesregister'; // Redirect to sales register
                                    });
                                }
                            } else {
                                alert("Failed to update purchase: " + response.message);
                            }
                        },
                        error: function (error) {
                            console.error("Error submitting form:", error);
                        }
                        ,
                        complete: function () {
                            hideLoadingOverlay(); // Hide loading overlay when request completes
                        }
                    });
                }

                function validateAmount(uniqueId) {
                    if ($('#discount_' + uniqueId).prop('disabled')) {
                        return true; // If discount is disabled, no validation needed
                    }

                    let amount = parseFloat($('#amount_' + uniqueId).val()) || 0;
                    let purcRate = parseFloat($('#purcRate_' + uniqueId).val()) || 0;
                    let quantity = parseFloat($('#quantity_' + uniqueId).val()) || 0;

                    let purcQuantityRate = purcRate * quantity;

                    if (amount < purcQuantityRate) {
                        let productName = $('#productname_' + uniqueId + ' option:selected').text();
                        let alertMessage = 'Amount cannot be less than Purchase Amount for product: ' + productName;
                        showAlert(alertMessage);
                        $('#amount_' + uniqueId).addClass('error');
                        return false; // Validation failed
                    } else {
                        $('#amount_' + uniqueId).removeClass('error');
                        $('#alertBox').hide(); // Hide the alert
                        return true; // Validation passed
                    }
                }
                // Real-time input validation on rate field
              
                $(document).on('input', 'input[name="rate"]', function () {
                    let uniqueId = $(this).attr('id').split('_')[1];
                    validateRate(uniqueId);
                });

                function validateRate(uniqueId) {
                    let rate = parseFloat($('#rate_' + uniqueId).val());
                    let purcRate = parseFloat($('#purcRate_' + uniqueId).val());

                    if (rate < purcRate) {
                        let productName = $('#productname_' + uniqueId + ' option:selected').text();
                        let alertMessage = 'Rate cannot be less than Purchase Rate for product: ' + productName;
                        showAlert(alertMessage);
                        $('#rate_' + uniqueId).addClass('error');
                    } else {
                        $('#rate_' + uniqueId).removeClass('error');
                        $('#alertMessage').addClass('d-none'); // Hide the alert if the condition is corrected
                    }
                }

                function validateRows() {
                    let isValid = true;
                    let rows = $('#customerTable tbody tr');

                    $('#alertMessage').addClass('d-none').html(''); // Clear any previous alerts

                    // Check if there are any rows
                    if (rows.length === 0) {
                        showAlert('No rows found. Please add at least one row.');
                        return false;
                    }

                    rows.each(function () {
                        let uniqueId = $(this).find('select[name="productname"]').attr('id').split('_')[1];
                        let isRowValid = true;

                        // Define the required fields
                        let requiredFields = [
                            '#productname_' + uniqueId,
                            '#batchNo_' + uniqueId,
                            '#quantity_' + uniqueId,
                            '#rate_' + uniqueId,
                            '#mrp_' + uniqueId
                        ];

                        // Validate required fields
                        requiredFields.forEach(function (selector) {
                            let $field = $(selector);
                            if (!$field.val()) {
                                isRowValid = false;
                                $field.addClass('error'); // Add error class to invalid fields
                            } else {
                                $field.removeClass('error'); // Remove error class if valid
                            }
                        });

                        // Validate rate vs purcRate
                        let rate = parseFloat($('#rate_' + uniqueId).val());
                        let purcRate = parseFloat($('#purcRate_' + uniqueId).val());
                        if (rate < purcRate) {
                            isRowValid = false;
                            validateRate(uniqueId); // Show the alert immediately for this row
                        }

                        // Validate amount vs purcQuantityRate
                        if (!validateAmount(uniqueId)) {
                            isRowValid = false;
                        }

                        if (!isRowValid) {
                            isValid = false;
                            $('html, body').animate({
                                scrollTop: $(this).find('.error').first().offset().top
                            }, 500); // Scroll to the first invalid field
                        }
                    });

                    if (!isValid) {
                        let alertMessage = 'Please correct the errors before submitting.';
                        showAlert(alertMessage);
                    }

                    return isValid;
                }
                // Function to show Bootstrap alert
                function showAlert(alertMessage) {
                    $('#alertMessage').removeClass('d-none').html(alertMessage +
                        '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>');
                }
                  function showLoadingOverlay() {
                    $('body').append('<div id="loadingOverlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 0.8); z-index: 9999; text-align: center;"><img src="/assets/img/6Gl.gif" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);"></div>');
                }

                function hideLoadingOverlay() {
                    $('#loadingOverlay').remove();
                }
            });

            function getProductsData() {
                var products = [];
                $('#customerTable tbody tr').each(function () {
                    try {
                        var uniqueId = $(this).find('select[name="productname"]').attr('id');
                        if (uniqueId) {
                            uniqueId = uniqueId.split('_')[1];

                            var product = {
                                purchaseId: $(this).find('.purchase-id').val(),
                                productId: $('#productname_' + uniqueId).val() || "",
                                batchNo: $('#batchNo_' + uniqueId).val() || "",
                                expiryDate: $('#expiryDate_' + uniqueId).val() || "",
                                tax: $('#tax_' + uniqueId).val() || "",
                                quantity: $('#quantity_' + uniqueId).val() || "",
                                free: $('#free_' + uniqueId).val() || 0,
                                uom: $('#uom_' + uniqueId).val() || "",
                                purcRate: $('#purcRate_' + uniqueId).val() || "",
                                mrp: $('#mrp_' + uniqueId).val() || "",
                                rate: $('#rate_' + uniqueId).val() || "",
                                discMode: $('#discMode_' + uniqueId).val() || 3,
                                discount: $('#discount_' + uniqueId).val() || 0,
                                amount: $('#amount_' + uniqueId).val() || "",
                                cgst: $('#cgst_' + uniqueId).val() || "",
                                sgst: $('#sgst_' + uniqueId).val() || "",
                                igst: $('#igst_' + uniqueId).val() || "",
                                totalAmount: $('#totalAmount_' + uniqueId).val() || ""
                            };
                            console.log('Product Details:', product);
                            products.push(product);
                        } else {
                            console.error('UniqueId attribute not found for this row:', this);
                        }
                    } catch (error) {
                        console.error('Error processing row:', this);
                        console.error('Error details:', error);
                    }
                });

                return products;
            }

            function isProductBatchAlreadySelected(selectedProductId, batchNo) {
                let exists = false;
                $('#customerTable tbody tr').each(function () {
                    let existingProductId = $(this).find('select[name="productname"]').val();
                    let existingBatchNo = $(this).find('input[name="batchNo"]').val();

                    if (existingProductId == selectedProductId && existingBatchNo == batchNo) {
                        exists = true;
                        return false; // Exit loop if a match is found
                    }
                });

                return exists;
            }

            function fetchBatchDetails(selectedProductId, uniqueId) {
                console.log('Selected Product ID:', selectedProductId);
                var requestData = {
                    selectedProductId: selectedProductId
                };

                $.ajax({
                    url: '/auth/sales/batchDetails/' + selectedProductId,
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(requestData),
                    success: function (response) {
                        console.log('Received response for batch details:', response);
                        if (response.success) {
                            let rows = [];

                            response.data.forEach(function (batch) {
                                let expiryDate = new Date(batch.expiryDate);
                                let formattedExpiry = expiryDate.getFullYear() !== 1970
                                    ? expiryDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short' })
                                    : 'N/A';

                                let now = new Date();
                                let currentMonth = new Date(now.getFullYear(), now.getMonth(), 1);
                                let threeMonthsAhead = new Date(now.getFullYear(), now.getMonth() + 3, 1);

                                let backgroundColor = '';
                                let color = '';
                                let selectable = true;

                                if (expiryDate < currentMonth) {
                                    backgroundColor = 'red';
                                    color = 'white';
                                    selectable = false;
                                } else if (expiryDate >= currentMonth && expiryDate < threeMonthsAhead) {
                                    backgroundColor = 'orange';
                                    color = 'white';
                                } else {
                                    backgroundColor = ''; // Default background
                                    color = '';
                                }

                                // Check if the batch is already selected
                                let isAlreadySelected = isProductBatchAlreadySelected(selectedProductId, batch.batchNo);
                                let adjustedRate = batch.rate * (1 + batch.profitMargin / 100);
                                rows.push({
                                    uniqueId: uniqueId,
                                    batchNo: batch.batchNo,
                                    expiryDate: batch.expiryDate,
                                    tax: batch.tax,
                                    quantity: batch.op_quantity,
                                    uom: batch.uom,
                                    rate: batch.rate,
                                   
                                    mrp: batch.mrp,
                                    pmrate: adjustedRate.toFixed(2),
                                    backgroundColor: backgroundColor,
                                    color: color,
                                    selectable: !isAlreadySelected && selectable, // Mark non-selectable if already selected or expired
                                    formattedExpiry: formattedExpiry,
                                    alreadySelected: isAlreadySelected // Flag to mark already selected rows
                                });
                            });

                            // Sort rows by color: orange first, then normal, then red
                            rows.sort(function (a, b) {
                                let colorOrder = { 'orange': 1, '': 2, 'red': 3 };
                                return colorOrder[a.backgroundColor] - colorOrder[b.backgroundColor];
                            });

                            // Clear existing rows
                            $('#batchDetailsBody').empty();

                            // Append rows
                            rows.forEach(function (row) {
                                $('#batchDetailsBody').append(
                                    `<tr data-uniqueId="${row.uniqueId}" 
                             data-batchNo="${row.batchNo}" 
                             data-expiryDate="${row.expiryDate}" 
                             data-tax="${row.tax}" 
                             data-quantity="${row.quantity}" 
                             data-uom="${row.uom}" 
                             data-rate="${row.rate}" 
                             data-mrp="${row.mrp}" 
                             data-pmrate="${row.pmrate}"
                             style="background-color: ${row.backgroundColor}; color: ${row.color};"
                             class="${row.selectable ? '' : 'non-selectable'} ${row.alreadySelected ? 'already-selected' : ''}">
                             <td>${row.batchNo}</td>
                             <td>${row.formattedExpiry}</td>
                             <td>${row.tax}</td>
                             <td>${row.quantity}</td>
                             <td>${row.uom}</td>
                             <td>${row.rate}</td>
                            
                             <td>${row.mrp}</td>
                                <td>${row.pmrate}</td> 
                         </tr>`
                                );
                            });

                            // Show the modal
                            $('#overlay').show();
                            $('#batchform').show();
                        } else {
                            console.error('No batch details found for the selected product');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching batch details:', error);
                        $('#batchDetailsBody').empty().append(
                            `<tr><td colspan="8">Error fetching batch details: ${error}</td></tr>`
                        );
                        $('#overlay').show();
                        $('#batchform').show();
                    }
                });
            }

            {{!-- $('#batchDetailsBody').on('click', 'tr', function () {
                // Check if the row has the class "non-selectable"
                if ($(this).hasClass('non-selectable')) {
                    console.log('This row is not selectable');
                    return; // Prevent further actions if the row is not selectable
                }

                // Retrieve uniqueId from the clicked row
                var uniqueId = $(this).attr('data-uniqueId');
                console.log('Retrieved uniqueId:', uniqueId);

                // Retrieve selectedProductId from the dropdown associated with this row
                var selectedProductId = $('#productname_' + uniqueId).val();
                console.log('Retrieved selectedProductId:', selectedProductId);

                // Retrieve values from the clicked row
                var batchNo = $(this).find('td:eq(0)').text();
                var tax = $(this).find('td:eq(2)').text();
                var quantity = $(this).find('td:eq(3)').text();
                var uom = $(this).find('td:eq(4)').text();
                var rate = $(this).find('td:eq(5)').text();
                var mrp = $(this).find('td:eq(6)').text();
                var pmrate = $(this).find('td:eq(7)').text();
                $('#rate_' + uniqueId).attr('data-pmrate', pmrate).attr('data-mrp', mrp);
                // Update input fields in the customerTable with uniqueId
                $('#batchNo_' + uniqueId).val(batchNo);
                $('#tax_' + uniqueId).val(tax);
                $('#quantity_' + uniqueId).val(quantity).attr('max', quantity);
                $('#uom_' + uniqueId).val(uom);
                $('#purcRate_' + uniqueId).val(rate);
                $('#mrp_' + uniqueId).val(mrp);
                $('#rate_' + uniqueId).val(pmrate).attr('min', pmrate).attr('max', mrp);


                // Hide overlay and batch form
                $('#overlay').hide();
                $('#batchform').hide();
            });
 --}}


            function generateUniqueId() {
                return uuidv4();
            }

            $(document).ready(function () {
                // Trigger validation on discount, rate, quantity, or amount change
                $('#customerTable tbody').on('input', 'input[name="discount"], input[name="rate"], input[name^="quantity"], input[name="amount"]', function () {
                    let uniqueId = $(this).attr('id').split('_')[1]; // Get the unique ID from the input element
                    validateAmount(uniqueId);
                });

                // Trigger validation on discMode change
                $(document).on('change', "select[name='discMode']", function () {
                    var uniqueId = $(this).attr('id').split('_')[1]; // Get the unique ID
                    var discountInput = $('#discount_' + uniqueId);   // Find the corresponding discount input

                    if ($(this).val()) {
                        // Enable the discount input if a valid option is selected
                        discountInput.prop('disabled', false);
                    } else {
                        // Disable the discount input if no valid option is selected
                        discountInput.prop('disabled', true);
                    }

                    // Trigger validation after discMode change
                    validateAmount(uniqueId);
                });

                // Function to handle row click and populate fields
                $('#batchDetailsBody').on('click', 'tr', function () {
                    // Check if the row has the class "non-selectable"
                    if ($(this).hasClass('non-selectable')) {
                        console.log('This row is not selectable');
                        return; // Prevent further actions if the row is not selectable
                    }

                    // Retrieve uniqueId from the clicked row
                    var uniqueId = $(this).attr('data-uniqueId');
                    console.log('Retrieved uniqueId:', uniqueId);

                    // Retrieve values from the clicked row
                    var batchNo = $(this).find('td:eq(0)').text();
                    var expiryDate = $(this).find('td:eq(1)').text();
                    var tax = $(this).find('td:eq(2)').text();
                    var quantity = $(this).find('td:eq(3)').text();
                    var uom = $(this).find('td:eq(4)').text();
                    var rate = $(this).find('td:eq(5)').text();
                    var mrp = $(this).find('td:eq(6)').text();
                    var pmrate = $(this).find('td:eq(7)').text(); // Initial pmrate value

                    // Update input fields in the customerTable with uniqueId
                    $('#batchNo_' + uniqueId).val(batchNo);
                    $('#expiryDate_' + uniqueId).val(expiryDate);
                    $('#tax_' + uniqueId).val(tax);
                    $('#quantity_' + uniqueId).val(quantity).attr('max', quantity);
                    $('#uom_' + uniqueId).val(uom);
                    $('#purcRate_' + uniqueId).val(rate);
                    $('#mrp_' + uniqueId).val(mrp);
                    $('#rate_' + uniqueId).val(pmrate).attr('min', pmrate).attr('max', mrp);

                    // Store pmrate and mrp as data attributes for future reference
                    $('#rate_' + uniqueId).attr('data-pmrate', pmrate).attr('data-mrp', mrp);

                    // Hide overlay and batch form
                    $('#overlay').hide();
                    $('#batchform').hide();
                });

                // Validation function for amount and rate check
                function validateAmount(uniqueId) {
                    // Check if the discount input is disabled; if yes, skip validation
                    if ($('#discount_' + uniqueId).prop('disabled')) {
                        return;
                    }

                    // Parse values and handle potential NaN (Not-a-Number) issues
                    let amount = parseFloat($('#amount_' + uniqueId).val()) || 0;
                    let rate = parseFloat($('#rate_' + uniqueId).val()) || 0;
                    let quantity = parseFloat($('#quantity_' + uniqueId).val()) || 0;

                    // Retrieve the initial pmrate value stored in data-pmrate for the row
                    let pmrate = parseFloat($('#rate_' + uniqueId).attr('data-pmrate')) || 0;
                    let mrp = parseFloat($('#rate_' + uniqueId).attr('data-mrp')) || 0;

                    // Set the min and max rate only when initializing or updating the row, but DO NOT reset the rate value
                    if ($('#rate_' + uniqueId).attr('min') !== pmrate) {
                        $('#rate_' + uniqueId).attr('min', pmrate); // Set the minimum rate
                    }

                    if ($('#rate_' + uniqueId).attr('max') !== mrp) {
                        $('#rate_' + uniqueId).attr('max', mrp); // Set the maximum rate
                    }

                    // Ensure the rate is within the valid range without resetting its value
                    if (rate < pmrate || rate > mrp) {
                        showAlert(`Rate must be between ${pmrate} and ${mrp}.`);
                        $('#rate_' + uniqueId).addClass('error');
                    } else {
                        $('#rate_' + uniqueId).removeClass('error');
                    }

                    // Validate the amount based on initial pmrate * quantity
                    let rateQuantity = pmrate * quantity;

                    // Check if the amount is less than pmrate * quantity
                    if (amount < rateQuantity) {
                        let productName = $('#productname_' + uniqueId + ' option:selected').text();
                        let alertMessage = 'Amount cannot be less than Rate * Quantity for product: ' + productName;
                        showAlert(alertMessage); // Show the alert message
                        $('#amount_' + uniqueId).addClass('error');
                    } else {
                        // If the amount is valid, remove error class and hide the alert
                        $('#amount_' + uniqueId).removeClass('error');
                        $('#alertMessage').addClass('d-none'); // Hide the alert if the condition is corrected
                    }
                }

                // Function to show alert message
                function showAlert(message) {
                    $('#alertMessage').text(message).removeClass('d-none').addClass('alert alert-danger');
                }
            });


        });

        function fetchDiscmodeOptions(uniqueId) {
            $.ajax({
                url: '/auth/purchase/discmode',
                method: 'GET',
                dataType: 'json',
                success: function (response) {
                    console.log('Received response for discmode options:', response);
                    var options = response.data;

                    if (options && options.length) {

                        var discModeDropdown = $('#discMode_' + uniqueId);

                        discModeDropdown.find('option').remove();

                        discModeDropdown.append($('<option>', {
                            selected: 'selected',
                            disabled: 'disabled',
                            text: 'Select Disc Mode'
                        }));
                        options.forEach(function (option) {
                            discModeDropdown.append($('<option>', {
                                value: option.id,
                                text: option.discMode
                            }));
                        });

                        console.log('Dropdown values:', discModeDropdown.val());
                    } else {
                        console.error('No options found for discmode');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching discmode options:', error);
                }
            });

        }

    function calculateTotals() {
        let totalAmount = 0;
        let totalCGST = 0;
        let totalSGST = 0;
        let totalIGST = 0;
        let totalNetAmount = parseFloat($('#supplierinvoiceamount').val()) || 0;

        // Loop through each row in the customer table
        $('#customerTable tbody tr').each(function () {
            let row = $(this);
            let amount = parseFloat(row.find('input[name="amount"]').val()) || 0;
            let cgst = parseFloat(row.find('input[name="cgst"]').val()) || 0;
            let sgst = parseFloat(row.find('input[name="sgst"]').val()) || 0;
            let igst = parseFloat(row.find('input[name="igst"]').val()) || 0;

            totalAmount += amount;
            totalCGST += cgst;
            totalSGST += sgst;
            totalIGST += igst;
        });

        let totalTax = totalCGST + totalSGST + totalIGST;

        // Update displayed totals
        $('#pamount').text(totalAmount.toFixed(2));
        $('#pcgst').text(totalCGST.toFixed(2));
        $('#psgst').text(totalSGST.toFixed(2));
        $('#pigst').text(totalIGST.toFixed(2));
        $('#pnetAmount').text(totalNetAmount.toFixed(2));
        $('#psubtotal').text(totalAmount.toFixed(2));

        // Update hidden inputs
        $('#pamount_').val(totalAmount.toFixed(2));
        $('#pcgst_').val(totalCGST.toFixed(2));
        $('#psgst_').val(totalSGST.toFixed(2));
        $('#pigst_').val(totalIGST.toFixed(2));
        $('#pnetAmount_').val(totalNetAmount.toFixed(2));
        $('#psubtotal_').val(totalAmount.toFixed(2));

        // Subtotal and net amount
        let subtotal = parseFloat($('#psubtotal').text()) || 0;
        let netAmount = parseFloat($('#pnetAmount').text()) || 0;

        // Get discount mode and discount value from the input fields
        let discMode = $('#pdiscMode').val() || "3"; // Default to "3" if not selected
        let discountInput = parseFloat($('#pdiscount').val()) || 0; // This will hold the raw input value

        let discountAmount = 0; // Variable for calculated discount amount

        if (isNaN(discountInput)) {
            discountInput = 0;
        }

        // Apply discount logic
        if (discMode === "3" || discMode === "N/A") {
            // No discount
            discountAmount = 0;
            $('#pdiscount').val('0');  // Reset input field to 0
        } else if (discMode === "percentage" || discMode === "1") {
            // Calculate discount as a percentage of the subtotal
            discountAmount = (subtotal * discountInput) / 100;  // Calculate discount amount
        } else {
            // If a fixed amount discount, use it directly
            discountAmount = discountInput;
        }

        // Subtotal minus calculated discount amount
        subtotal -= discountAmount;

        // Implement rounding rule for subtotal
        let roundedSubtotal = Math.round(subtotal);

        // Calculate roundOff (optional, adjust as needed)
        let roundOff = 0;

        // Update displayed and hidden inputs with calculated values
        $('#psubtotal').text(roundedSubtotal.toFixed(2));
        $('#psubtotal_').val(roundedSubtotal.toFixed(2));
        $('#proundOff').text(roundOff.toFixed(2));
        $('#proundOff_').val(roundOff.toFixed(2));

        // Store discount mode and raw discount input value, not the calculated amount
        $('#pdiscMode_').val(discMode);   // Send discount mode as-is
        $('#pdiscount_').val($('#pdiscount').val());  // Send raw input value (percentage or amount)
    }

    // Trigger recalculation when discount mode or discount value changes
    $('#pdiscMode, #pdiscount').change(function () {
        calculateTotals();
    });

        $(document).on('click', '#addmanufacturer', function () {
            $("#manufacturerform").show();
            $("#id").val('');
        });

        var table = $("#customerTable").DataTable({
            searching: false,
            paging: false,
            scrollY: '400px',
            scrollX: true,
            columns: [
                { data: 'Id' },
                { data: 'product' },
                { data: 'batchNo' },
                {data:'expiryDate'},
                { data: 'tax' },
                { data: 'quantity' },
                { data: 'free' },
                { data: 'uom', className: 'd-none' },
                { data: 'purcRate' },
                { data: 'mrp' },
                { data: 'rate' },
                { data: 'discMode' },
                { data: 'discount' },
                { data: 'amount' },
                { data: 'cgst', className: 'd-none' },
                { data: 'sgst', className: 'd-none' },
                { data: 'igst', className: 'd-none' },
                { data: 'totalAmount' },
                {
                    data: 'Id',
                    render: function (data) {
                        return '<i class="fa-solid fa-trash div deletetransBtn" type="button" data-id="' + data + '"></i>';
                    }
                }
            ],
            scrollCollapse: false,
            responsive: true,
            bInfo: true,
            bBorders: true,
            fixedColumns: {
                leftColumns: 1
            }
        });

        table.column('.action').visible(false);

        // Toggle visibility of the action column and buttons when Edit button is clicked
        $('.editmasbtn').click(function () {
            var isVisible = table.column('.action').visible();
            table.column('.action').visible(!isVisible);


        });

        $('#purchaseId').on('change', function () {
            var selectedPurchaseId = $(this).val();
            table.ajax.url('/auth/sales/saleproductid?purchaseId=' + selectedPurchaseId).load();
        });
        if (table.data().count() === 0) {
            console.log("No data available in table");
        }
        if (table.rows().count() === 0) {
            $("#emptyMessage").show();
        }
        $(document).ready(function () {
            var companyState;
            var totalAmount = 0;
            var selectedSupplier;

            $('#customerTable tbody').on('input', 'input[name^="rate"], input[name^="quantity"], select[name^="discMode"], input[name^="discount"]', function () {
                var row = $(this).closest('tr');
                var rate = parseFloat(row.find('input[name^="rate"]').val()) || 0;
                var quantity = parseFloat(row.find('input[name^="quantity"]').val()) || 0;
                var discMode = row.find('select[name^="discMode"]').val();
                var discountInput = row.find('input[name^="discount"]');

                if (discMode === '3') {
                    discountInput.val('0');
                }

                var discount = parseFloat(discountInput.val()) || 0;
                var amount = calculateAmount(rate, quantity, discMode, discount);

                row.find('input[name^="amount"]').val(amount.toFixed(2));

                var selectedCustomerState = $('#supplierSelect').find(':selected').data('state');

                calculateTax(row, selectedCustomerState, companyState);
                calculateTotals();
                calculateTotalAmount();

            });

            function calculateTotalAmount() {
                $('#customerTable tbody tr').each(function () {
                    var row = $(this);
                    var amount = parseFloat(row.find('input[name^="amount"]').val()) || 0;
                    var cgst = parseFloat(row.find('input[name^="cgst"]').val()) || 0;
                    var sgst = parseFloat(row.find('input[name^="sgst"]').val()) || 0;
                    var igst = parseFloat(row.find('input[name^="igst"]').val()) || 0;

                    var totalTax = cgst + sgst + igst;
                    var rowTotalAmount = amount + totalTax;
                    row.find('input[name^="totalAmount"]').val(rowTotalAmount.toFixed(2));
                });
            }

            function calculateAmount(rate, quantity, discMode, discount) {
                console.log('Calculating Amount - Inputs:', { rate, quantity, discMode, discount });

                var calculatedAmount = 0;

                if (discMode === 'N/A' || discMode === '3') {
                    discount = 0;
                    calculatedAmount = rate * quantity - discount;
                    console.log('Calculating Amount - N/A or 3:', calculatedAmount);
                } else if (discMode === 'percentage' || discMode === '1') {
                    calculatedAmount = rate * quantity * (1 - discount / 100);
                    console.log('Calculating Amount - Percentage:', calculatedAmount);
                } else {
                    calculatedAmount = rate * quantity - discount;
                    console.log('Calculating Amount - Value:', calculatedAmount);
                }

                return calculatedAmount;
            }



            function calculateTax(row, customerState, companyState) {
                var amount = parseFloat(row.find('input[name^="amount"]').val()) || 0;
                var taxRate = parseFloat(row.find('input[name^="tax"]').val()) || 0;

                var isLocalSupply = customerState && companyState && customerState.toLowerCase() === companyState.toLowerCase();

                var cgst, sgst, igst;

                if (isLocalSupply) {
                    cgst = (amount * taxRate / 200).toFixed(2);
                    sgst = cgst;
                    igst = 0;
                } else {
                    cgst = 0;
                    sgst = 0;
                    igst = (amount * taxRate / 100).toFixed(2);
                }

                var totalTax = (parseFloat(cgst) + parseFloat(sgst) + parseFloat(igst)).toFixed(2);

                row.find('input[name^="cgst"]').val(cgst);
                row.find('input[name^="sgst"]').val(sgst);
                row.find('input[name^="igst"]').val(igst);
                row.find('input[name^="totalTax"]').val(totalTax);

                calculateTotalAmount();
            }


            $('.dropdown[name="customername"]').on('change', function () {
                var selectedSupplier = $(this).val();
                console.log('Selected Supplier:', selectedSupplier);
                initiateFetchCompanyState(selectedSupplier);
            });

            async function fetchSupplierNames() {
                try {
                    const response = await $.ajax({
                        url: '/auth/sales/customername',
                        method: 'GET',
                    });

                    console.log('Received response for Customer Name:', response);
                    const options = response.data;
                    const $dropdown = $('.dropdown[name="customername"]');

                    // Clear existing options
                    $dropdown.empty(); // Ensures no duplicates

                    if (options && options.length) {
                        // Add a default option
                        $dropdown.append('<option value="" disabled selected>Select Customer</option>');

                        options.forEach((option) => {
                            const $option = $('<option>', {
                                value: option.id,
                                text: option.ledgername,
                                'data-state': option.state,
                                'data-mobile': option.mobile
                            });

                            // Add the option to the dropdown
                            $dropdown.append($option);
                        });

                        // Optionally, set the first option as selected by default
                        $dropdown.trigger('change');
                    } else {
                        console.error('No options found for Customer Name');
                    }

                } catch (error) {
                    console.error('Error fetching options for Customer Name:', error);
                }
            }


            function initiateFetchCompanyState(customerState) {
                fetchCompanyStateAndCalculateTax(customerState);
            }

            function fetchCompanyStateAndCalculateTax(customerState) {
                $.ajax({
                    url: '/auth/purchase/companystate',
                    method: 'GET',
                    success: function (response) {
                        console.log('Received response for Company State:', response);
                        companyState = response.data[0].state;
                        console.log('Company State:', companyState);
                        calculateTaxForAllRows(customerState, companyState);
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching Company State:', error);
                    }
                });
            }

            function calculateTaxForAllRows(customerState, companyState) {
                $('#customerTable tbody tr').each(function () {
                    var row = $(this);
                    calculateTax(row, customerState, companyState);
                });
            }


            fetchSupplierNames();

            var rowDetails;
            async function fetchSalesIDs() {
                try {
                    const response = await $.ajax({
                        url: '/auth/sales/salesids',
                        method: 'GET',
                        data: { view: 'salesids' },
                    });

                    console.log('Received response for Purchase IDs:', response);
                    const options = response.data;
                    console.log('Options:', options);

                    const $dropdown = $('.dropdown[name="Id"]');
                    $dropdown.empty(); // Clear existing options

                    if (options && options.length) {
                        options.forEach((row) => {
                            if (row.id !== undefined && row.id !== null && !isNaN(row.id)) {
                                const saledate = formatDate(row.saledate);

                                const optionHtml =
                                    '<option value=\'' +
                                    JSON.stringify(row) +
                                    '\'>' +
                                    '<strong>ID: </strong>' + row.id +
                                    ',<strong>Customer Name:</strong> ' + row.customername +
                                    ',<strong>Customer Mobile No: </strong>' + row.customermobileno +
                                    ',<strong> Sale Date: </strong>' + saledate +
                                    '</option>';

                                $dropdown.append(optionHtml);
                            } else {
                                console.warn('Skipping option with invalid ID:', row);
                            }
                        });
                    } else {
                        console.error('No options found for sales IDs');
                    }

                    // Handle URL parameters to select a specific purchase ID
                    const urlParams = new URLSearchParams(window.location.search);
                    const purchaseIdParam = urlParams.get('id');
                    console.log('Purchase ID from URL:', purchaseIdParam);

                    if (purchaseIdParam) {
                        const purchaseIdInt = parseFloat(purchaseIdParam);
                        $dropdown.find('option').each(function () {
                            const optionValue = $(this).val();
                            if (optionValue !== 'view details') {
                                const optionRow = JSON.parse(optionValue);
                                if (optionRow.id === purchaseIdInt) {
                                    $(this).prop('selected', true);
                                }
                            }
                        });
                        $dropdown.change(); // Trigger change event after selection
                    }
                } catch (error) {
                    console.error('Error fetching options for sales IDs:', error);
                }
            }

            $('.dropdown[name="Id"]').on('change', async function () {
                const selectedOption = $(this).find('option:selected');

                if (!selectedOption || !selectedOption.val()) {
                    return;
                }

                try {
                    const rowDetails = JSON.parse(selectedOption.val());
                    $('#id').val(rowDetails.id);
                    $('#customermobileno').val(rowDetails.customermobileno);
                    $('#paymentmode').val(rowDetails.paymentmode);
                    $('#saledate').val(formatDate(rowDetails.saledate));
                    $('#referno').val(rowDetails.referno);
                    $('#transportno').val(rowDetails.transportno);
                    $('#supplierSelect').val(rowDetails.customer);
                    $('.dropdown[name="salesmanname"]').val(rowDetails.salesman);

                    const selectedSupplierState = $('#supplierSelect').find(':selected').data('state');
                    await initiateFetchCompanyState(selectedSupplierState);

                    // Update amounts with proper formatting
                    $('#pnetAmount').text(!isNaN(rowDetails.netAmount) ? parseFloat(rowDetails.netAmount).toFixed(2) : 'Invalid Net Amount');
                    $('#pamount').text(!isNaN(rowDetails.amount) ? parseFloat(rowDetails.amount).toFixed(2) : 'Invalid Amount');
                    $('#pigst').text(!isNaN(rowDetails.igst) ? parseFloat(rowDetails.igst).toFixed(2) : 'Invalid IGST');
                    $('#pcgst').text(!isNaN(rowDetails.cgst) ? parseFloat(rowDetails.cgst).toFixed(2) : 'Invalid CGST');
                    $('#psgst').text(!isNaN(rowDetails.sgst) ? parseFloat(rowDetails.sgst).toFixed(2) : 'Invalid SGST');
                    $('#psubtotal').text(!isNaN(rowDetails.subtotal) ? parseFloat(rowDetails.subtotal).toFixed(2) : 'Invalid Sub Total');
                    $('#ptcs').text(!isNaN(rowDetails.tcs) ? parseFloat(rowDetails.tcs).toFixed(2) : 'Invalid TCS');
                    $('#proundOff').text(!isNaN(rowDetails.roundoff) ? parseFloat(rowDetails.roundoff).toFixed(2) : 'Invalid roundOff');

                    // Set values for discount mode and discount input box
                    $('#pdiscMode').val(rowDetails.discMode);
                    $('#pdiscount').val(rowDetails.discount);
                    selectedOption.prop('selected', true);

                    console.log('rowDetails.id:', rowDetails.id);
                    console.log('Dropdown Options:', $(this).val());

                    const purchaseId = parseFloat(rowDetails.id);
                    if (isNaN(purchaseId)) {
                        console.error('Invalid purchaseId:', purchaseId);
                        return;
                    }
                    if (rowDetails.isDraft === true) {
                        $('.editmasbtn').prop('disabled', false);  // Editable
                        console.log('Editing enabled: isDraft is true');
                    } else {
                        $('.editmasbtn').prop('disabled', true);   // Not editable
                        console.log('Editing disabled: isDraft is false');
                    }
                    const productResponse = await $.ajax({
                        url: '/auth/sales/saleproductid',
                        method: 'GET',
                        data: { purchaseId: purchaseId },
                    });

                    console.log('Received response for ProductId:', productResponse);
                    updateCustomerTable(productResponse.data);

                } catch (error) {
                    console.error('Error handling dropdown change:', error);
                }
            });

            // Call the functions to fetch supplier names and sales IDs
            (async function initialize() {
                await fetchSupplierNames();
                await fetchSalesIDs();
            })();


        });



        function updateCustomerTable(data) {
            var table = $('#customerTable').DataTable();
            table.clear().rows.add(data).draw();
        }

        function formatDate(dateObject) {
            const date = new Date(dateObject);
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        $(document).ready(function () {
            $('#new').click(function () {
                window.location.href = '/sales'
            });
        });

    </script>
    {{!-- $('#supplierSelect').val(rowDetails.customer); --}}
    {{!-- $('#salesmannameSelect').val(rowDetails.salesman); --}}
</body>

</html>